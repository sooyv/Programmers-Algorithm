function solution(num_list) {
    // last = 배열의 마지막 인덱스
    let last = num_list[num_list.length - 1];
    // secLast = 배열의 마지막에서 두번째 인덱스
    let secLast = num_list[num_list.length - 2];
    // secLast보다 last가 크다면 ? 
    // answer배열에 마지막 원소에서 그전 원소를 뺀 값을 push : 
    // 마지막 원소가 그전 원소보다 크지 않다면 마지막 원소를 두 배한 값을 push
    last > secLast ? num_list.push(last - secLast) : num_list.push(last * 2)
    return num_list;
}


// at()을 사용하기
// num_list[num_list.length - 1] 대신하여, num_list.at(-1)으로 배열의 마지막 원소를 찾을 수 있다.
function solution(num_list) {
   return num_list.at(-2) >= num_list.at(-1) ? [...num_list, num_list.at(-1)*2] : [...num_list, num_list.at(-1) - num_list.at(-2)];  
}


// 다른 사람의 풀이
function solution(num_list) {
    // num_list 배열을 복사한 후, reverse() 메서드를 사용하여 역순으로 뒤집은 배열에서 
    // 첫 번째와 두 번째 요소를 추출하여 last와 secLast 변수에 할당
    const [last, secLast] = [...num_list].reverse();
    // 마지막 요소가 마지막에서 두번째 요소보다 크다면, 
    // 배열에 (last - secLast)을 넣고, 아니라면 last * 2을 넣는다
    return [...num_list, last > secLast ? (last - secLast) : last * 2];
}