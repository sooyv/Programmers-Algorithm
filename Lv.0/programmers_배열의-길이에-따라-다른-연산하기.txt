function solution(arr, n) {
    // length가 % 2 === 0 이라면 짝수로,
    if (arr.length % 2 === 0) {
        // arr의  모든 홀수 인덱스 위치에 n을 더한 배열을 return
        // map을 이용해 각 인덱스를 돌고, 인덱스 i번째를 2로 나눴을때 0이 아니라면 홀수번째이므로
        // 해당 인덱스에 n을 더하여 return
        return arr.map((e, i) => i % 2 !== 0 ? e + n : e);
    } else {
        // 인덱스 i번째를 2로 나눴을때 0이라면 짝수번째이므로
        // 해당 인덱스에 n을 더하여 return
        return arr.map((e, i) => i % 2 === 0 ? e + n : e);
    }
}



// 다른사람의 풀이
function solution(arr, n) {
    
    // arr.length % 2는 배열 a의 길이가 홀수인지 짝수인지를 판별
    // i % 2는 현재 인덱스 i가 홀수인지 짝수인지를 판별
    // ^는 XOR (carot operator) 연산자로, 두 피연산자 중 하나만 true일 때 true를 반환
    // 따라서 arr.length % 2 ^ i % 2는 배열의 길이와 현재 인덱스가 서로 다른 홀수/짝수 조합일 때 true를 반환
    // 조건식이 true인 경우, 즉, 배열의 길이와 현재 인덱스가 서로 다른 홀수/짝수 조합일 때는 v + n을 반환
    // 조건식이 false인 경우, 즉, 배열의 길이와 현재 인덱스가 같은 홀수/짝수 조합일 때는 원래의 요소 v를 반환
    
    return arr.map((v, i) => arr.length % 2 ^ i % 2 ? v + n : v);
}
