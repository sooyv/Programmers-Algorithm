// shift()를 사용한 풀이
function solution(cards1, cards2, goal) {
    for (let ele of goal) {
        // cards1 배열의 첫번째 인덱스와 goal 배열의 ele가 같다면
        if (cards1[0] == ele) {
            // 같은 문자를 shift()를 이용해 제거
            cards1.shift();
        // // cards2 배열의 첫번째 인덱스와 goal 배열의 ele가 같다면
        } else if (cards2[0] == ele) {
            // 같은 문자를 shift()를 이용해 제거
            cards2.shift();
            
        } else {
            return "No";
        }  
    }
    return "Yes";
}



// 다른 풀이 - 배열에서 값을 shift()하지 않고 풀이
function solution(cards1, cards2, goal) {
    let idx1 = 0;
    let idx2 = 0;
    
    // goal 배열의 요소를 순환
    for (const ele of goal) {
        // cards1 배열의 요소와 goal 배열의 ele 요소가 같다면,
        // cards1 배열의 인덱스를 다음 인덱스로 
        if (cards1[idx1] == ele) {
            idx1++;
        // cards2 배열의 요소와 goal 배열의 ele 요소가 같다면,
        // cards2 배열의 인덱스를 다음 인덱스로
        } else if (cards2[idx2] == ele) {
            idx2++;
        } else {
            return "No";
        }
    }
    return "Yes";
}





// 처음 작성 코드
// function solution(cards1, cards2, goal) {
//     let k = 0;
//     let j = 0;
//     for (let i = 0; i < goal.length; i++) {
//         if (goal[i] == cards1[i]) {
//             k++;                
//         } else if (goal[i] == cards2[i]) {
//             j++;
//         } else {
//             return "No";
//         }
//     }
//     return goal.length == k+j ? "Yes" : "No";
// }

// 처음 i = 0일때는 첫번재 if문에 해당되어, k++ (cards[0] == goal[0])로 동작 되지만,
// i = 1일 경우, goal[1] == cards2[0]과 똑같고 더이상 같은 문자를 찾을 수 없음.
// 조건에 해당하는 답을 구할 수 없는 잘못된 코드,,,,