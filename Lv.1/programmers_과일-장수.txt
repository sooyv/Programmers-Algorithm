// 입출력 예시
// 1번
// let k = 3;
// let m = 4;
// score = [1, 2, 3, 1, 2, 3, 1];

// 2번
// let k = 4;
// let m = 3;
// score = [4, 1, 2, 2, 4, 4, 4, 4, 1, 2, 4, 2];

// 처음 풀이
// 두번째 예시를 보고 코드를 생각해 보았다.
    // 처음엔 0, 1, 2 = 4, 4, 4,
    // 두번째 3, 4, 5 = 4, 4, 4,
    // 세번째 6, 7, 8 = 2, 2, 2,
    // 네번째 9, 10, 11 = 2, 1, 1

// 위의 예시에 따라서 가장 먼저 score를 내림차순으로 정렬해주었다.
// for문은 score의 길이를 m으로 나눈만큼만 반복해주고, 
// 각 반복문에 따라 i가 하나씩 늘어날때마다, m을 곱해주고, m도 늘어나게 해주어 각 상자에 넣을 갯수 m만큼 사과를 나눠주었다.
// 2번 입출력 예시는 통과하지만, 이 코드는 1번 입출력 예시에서 문제가 생겼다.
// score를 slice하는 과정에서 사과의 나머지가 m보다 작음에도 계산이 되는 문제였다.

function solution(k, m, score) {
    var answer = 0;
    score.sort((a, b) => b - a);
    // console.log(score)
    
    for (let i = 0; i < score.length/m; i++) {
        let apple = score.slice(i*m, m*(i+1));
        // console.log(apple)
        answer += Math.min(...apple) * m * 1;
    }

    return answer;
}

// 따라서 코드를 아래와 같이 수정해주었다.
// 삼항연산자를 이용해 apple 배열의 길이가 m과 같은지 확인해주고 같지 않다면, 계산해주지 않기 때문에 answer 배열에 0을 더해준다.

function solution(k, m, score) {
    var answer = 0;
    score.sort((a, b) => b - a);
    // console.log(score)
    
    for (let i = 0; i < score.length/m; i++) {
        let apple = score.slice(i*m, m*(i+1));
        console.log(apple)
        apple.length == m ? answer += Math.min(...apple) * m * 1 : answer += 0;
    }

    return answer;
}


// 다른 사람의 코드
function solution(k, m, score) {
    let answer = 0;
    
    // score를 오름차순으로 정렬한 후, slice를 이용하여 m으로 나눴을 때 남는 나머지를 버린다.
    const sortedScore = score.sort((a, b) => a - b).slice(score.length % m);
    
    // for문을 순회하면서, i+=m으로 증감하여 가장 작은 수만 answer에 더해준다.
    for (let i = 0; i < sortedScore.length; i += m) {
        answer += sortedScore[i] * m;
    }
    return answer;
}