function solution(rny_string) {
    return rny_string.split("m").join('rn');
    
    // split("m")은 문자열을 "m"을 기준으로 분할하여 배열로 반환하고,
    // join('rn')을 사용해 "rn"으로 연결하여 하나의 문자열로 만든다.
}

// replace()
function solution(rny_string) {
    return rny_string.replace(/m/g, "rn");

    // /m/g는 정규 표현식을 사용해 "m"을 찾아 "rn"으로 대체
    // /: 정규 표현식 패턴의 시작과 끝을 나타냄
    // m: 패턴을 구성하는 문자로, 여기서는 "m"이라는 문자를 나타냄
    // g: 정규 표현식의 플래그. "g"는 Global을 나타내며, 전역 검색을 수행하라는 의미 
    // 이 플래그가 지정되면 문자열 전체에서 패턴과 일치하는 모든 항목을 찾는다.
}

// replaceAll()
function solution(rny_string) {
    return rny_string.replaceAll("m", "rn");

    // 문자열에서 "m"을 모두 "rn"으로 대체
}

// map()
function solution(rny_string) {
    var answer = '';
    return [...rny_string].map(e => e == 'm' ? 'rn' : e).join("");

    // 문자열 rny_string을 배열로 변환
    // .map(e => e == 'm' ? 'rn' : e): 배열의 각 요소를 순회하면서 
    // 해당 요소가 'm'인 경우에는 'rn'으로 대체하고, 그렇지 않은 경우에는 원래의 값을 유지
    // .join(""): map() 메서드를 통해 변환된 배열을 다시 문자열로 결합
}